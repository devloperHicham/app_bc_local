services:
  # ===================== Postgres DBs ==========================
  postgres-user:
    image: postgres:16
    container_name: postgres-user
    ports:
      - "${POSTGRES_USER_PORT}:5432"
    environment:
      POSTGRES_DB: ${POSTGRES_USER_DB}
      POSTGRES_USER: ${POSTGRES_USER_DB}
      POSTGRES_PASSWORD: ${POSTGRES_USER_PASSWORD}
    volumes:
      - user-data:/var/lib/postgresql/data
      - ./init-scripts/user.sql:/docker-entrypoint-initdb.d/user.sql
    networks:
      - backend
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER_DB}" ]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres-setting:
    image: postgres:16
    container_name: postgres-setting
    ports:
      - "${POSTGRES_SETTING_PORT}:5432"
    environment:
      POSTGRES_DB: ${POSTGRES_SETTING_DB}
      POSTGRES_USER: ${POSTGRES_SETTING_DB}
      POSTGRES_PASSWORD: ${POSTGRES_USER_PASSWORD}
    volumes:
      - setting-data:/var/lib/postgresql/data
      - ./init-scripts/setting.sql:/docker-entrypoint-initdb.d/setting.sql
    networks:
      - backend
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_SETTING_DB}" ]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres-comparison:
    image: postgres:16
    container_name: postgres-comparison
    ports:
      - "${POSTGRES_COMPARISON_PORT}:5432"
    environment:
      POSTGRES_DB: ${POSTGRES_COMPARISON_DB}
      POSTGRES_USER: ${POSTGRES_COMPARISON_DB}
      POSTGRES_PASSWORD: ${POSTGRES_USER_PASSWORD}
    volumes:
      - comparison-data:/var/lib/postgresql/data
      - ./init-scripts/comparison.sql:/docker-entrypoint-initdb.d/comparison.sql
    networks:
      - backend
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_COMPARISON_DB}" ]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres-schedule:
    image: postgres:16
    container_name: postgres-schedule
    ports:
      - "${POSTGRES_SCHEDULE_PORT}:5432"
    environment:
      POSTGRES_DB: ${POSTGRES_SCHEDULE_DB}
      POSTGRES_USER: ${POSTGRES_SCHEDULE_DB}
      POSTGRES_PASSWORD: ${POSTGRES_USER_PASSWORD}
    volumes:
      - schedule-data:/var/lib/postgresql/data
      - ./init-scripts/schedule.sql:/docker-entrypoint-initdb.d/schedule.sql
    networks:
      - backend
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_SCHEDULE_DB}" ]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres-client:
    image: postgres:16
    container_name: postgres-client
    ports:
      - "${POSTGRES_CLIENT_PORT}:5432"
    environment:
      POSTGRES_DB: ${POSTGRES_CLIENT_DB}
      POSTGRES_USER: ${POSTGRES_CLIENT_DB}
      POSTGRES_PASSWORD: ${POSTGRES_USER_PASSWORD}
    volumes:
      - client-data:/var/lib/postgresql/data
      - ./init-scripts/client.sql:/docker-entrypoint-initdb.d/client.sql
    networks:
      - backend
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_CLIENT_DB}" ]
      interval: 10s
      timeout: 5s
      retries: 5

  # ===================== Spring Boot Services ==========================
  config-service:
    build:
      context: ./backend/config-service
      dockerfile: Dockerfile
    container_name: config-service
    ports:
      - "8888:8888"
    networks:
      - backend
    volumes:
      - ./config-data/config-service.yml:/config/config-service.yml
    environment:
      SPRING_BOOT_DEBUG: true
      SPRING_CONFIG_LOCATION: file:/config/config-service.yml
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8888/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  discovery-service:
    build:
      context: ./backend/discovery-service
      dockerfile: Dockerfile
    container_name: discovery-service
    ports:
      - "8761:8761"
    networks:
      - backend
    environment:
      SPRING_APPLICATION_NAME: discovery-service

  auth-service:
    build:
      context: ./backend/auth-service
      dockerfile: Dockerfile
    container_name: auth-service
    ports:
      - "${AUTH_SERVICE_PORT}:8081"
    depends_on:
      postgres-user:
        condition: service_healthy
      config-service:
        condition: service_started
    environment:
      SPRING_APPLICATION_NAME: auth-service
      SPRING_CONFIG_IMPORT: optional:configserver:${CONFIG_SERVICE_URL}/
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-user:5432/${POSTGRES_USER_DB}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER_DB}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_USER_PASSWORD}
    networks:
      - backend

  user-service:
    build:
      context: ./backend/user-service
      dockerfile: Dockerfile
    container_name: user-service
    ports:
      - "${USER_SERVICE_PORT}:8082"
    depends_on:
      postgres-user:
        condition: service_healthy
      config-service:
        condition: service_started
    environment:
      SPRING_APPLICATION_NAME: user-service
      SPRING_CONFIG_IMPORT: optional:configserver:${CONFIG_SERVICE_URL}/
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-user:5432/${POSTGRES_USER_DB}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER_DB}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_USER_PASSWORD}
      # Email Configuration
      SMTP_HOST: smtp.gmail.com
      SMTP_PORT: 587
      SMTP_USERNAME: devhicham00@gmail.com
      SMTP_PASSWORD: xvrqfdgwqejuwuwm
      EMAIL_FROM: noreply@booking-container.com
      FRONTEND_URL: ${FRONTEND_WEBSITE_HTTPS_PORT}:7000
      # Optional: Add these for better debugging
      SPRING_MAIL_PROPERTIES_MAIL_SMTP_AUTH: true
      SPRING_MAIL_PROPERTIES_MAIL_SMTP_STARTTLS_ENABLE: true
    networks:
      - backend

  setting-service:
    build:
      context: ./backend/setting-service
      dockerfile: Dockerfile
    container_name: setting-service
    ports:
      - "${SETTING_SERVICE_PORT}:8083"
    depends_on:
      postgres-setting:
        condition: service_healthy
      config-service:
        condition: service_started
    environment:
      SPRING_APPLICATION_NAME: setting-service
      SPRING_CONFIG_IMPORT: optional:configserver:${CONFIG_SERVICE_URL}/
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-setting:5432/${POSTGRES_SETTING_DB}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_SETTING_DB}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_USER_PASSWORD}
      STORAGE_LOCATION: /app/storage-images
    volumes:
      - ./storage-images:/app/storage-images
    networks:
      - backend

  comparison-service:
    build:
      context: ./backend/comparison-service
      dockerfile: Dockerfile
    container_name: comparison-service
    ports:
      - "${COMPARISON_SERVICE_PORT}:8084"
    depends_on:
      postgres-comparison:
        condition: service_healthy
      config-service:
        condition: service_started
    environment:
      SPRING_APPLICATION_NAME: comparison-service
      SPRING_CONFIG_IMPORT: optional:configserver:${CONFIG_SERVICE_URL}/
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-comparison:5432/${POSTGRES_COMPARISON_DB}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_COMPARISON_DB}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_USER_PASSWORD}
    networks:
      - backend

  schedule-service:
    build:
      context: ./backend/schedule-service
      dockerfile: Dockerfile
    container_name: schedule-service
    ports:
      - "${SCHEDULE_SERVICE_PORT}:8085"
    depends_on:
      postgres-schedule:
        condition: service_healthy
      config-service:
        condition: service_started
    environment:
      SPRING_APPLICATION_NAME: schedule-service
      SPRING_CONFIG_IMPORT: optional:configserver:${CONFIG_SERVICE_URL}/
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-schedule:5432/${POSTGRES_SCHEDULE_DB}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_SCHEDULE_DB}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_USER_PASSWORD}
    networks:
      - backend

  client-service:
    build:
      context: ./backend/client-service
      dockerfile: Dockerfile
    container_name: client-service
    ports:
      - "${CLIENT_SERVICE_PORT}:8086"
    depends_on:
      postgres-client:
        condition: service_healthy
      config-service:
        condition: service_started
    environment:
      SPRING_APPLICATION_NAME: client-service
      SPRING_CONFIG_IMPORT: optional:configserver:${CONFIG_SERVICE_URL}/
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-client:5432/${POSTGRES_CLIENT_DB}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_CLIENT_DB}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_USER_PASSWORD}
    networks:
      - backend

  api-gateway-service:
    build:
      context: ./backend/api-gateway-service
    container_name: api-gateway-service
    ports:
      - "${API_GATEWAY_PORT}:8881" #  to HTTPS port
    depends_on:
      - discovery-service
      - config-service
    volumes:
      - ./ssl:/ssl
    environment:
      SPRING_APPLICATION_NAME: api-gateway-service
      SPRING_CONFIG_IMPORT: configserver:${CONFIG_SERVICE_URL}/
      EUREKA_SERVICE_URL: ${DISCOVERY_SERVICE_URL}
    networks:
      - backend

  # ===================== Frontend Admin ==========================
  frontend-admin:
    build:
      context: ./frontend-admin
      dockerfile: Dockerfile
    container_name: frontend-admin
    ports:
      - "${FRONTEND_ADMIN_HTTPS_PORT}:4000"
    volumes:
      - ./frontend-admin/nginx.conf:/etc/nginx/conf.d/default.conf
      - ./ssl/shared-cert.pem:/etc/ssl/certs/shared-cert.pem
      - ./ssl/shared-key.pem:/etc/ssl/certs/shared-key.pem 
    depends_on:
      - api-gateway-service
    networks:
      - backend

  # ===================== Frontend Website ==========================
  frontend-website:
    build:
      context: ./frontend-website
      dockerfile: Dockerfile
    container_name: frontend-website
    ports:
      - "${FRONTEND_WEBSITE_HTTPS_PORT}:7000"
    volumes:
      - ./frontend-website/nginx.conf:/etc/nginx/conf.d/default.conf
      - ./ssl/shared-cert.pem:/etc/ssl/certs/shared-cert.pem
      - ./ssl/shared-key.pem:/etc/ssl/certs/shared-key.pem 
    depends_on:
      - api-gateway-service
    networks:
      - backend

  # ===================== pgAdmin ==========================
  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
    ports:
      - "${PGADMIN_PORT}:80"
    networks:
      - backend

# ===================== Networks & Volumes ==========================
networks:
  backend:
    driver: bridge

volumes:
  user-data:
  setting-data:
  comparison-data:
  schedule-data:
  client-data:
